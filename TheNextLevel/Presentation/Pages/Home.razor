@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@using TheNextLevel.Application.Services
@inject IProjectService ProjectService
@inject ITaskService TaskService

@page "/"
<main class="main-content">
    @if (_isLoading)
    {
        <p>Loading projects...</p>
    }
    else if (_projects.Count == 0)
    {
        <div class="empty-project">
            <p>No projects found. Create your first project!</p>
        </div>
    }
    else
    {
        <div class="projects-grid">
            @foreach (var project in _projects)
            {
                <ProjectCard Project="project" />
            }
        </div>
    }

    <div class="fab-container">
        <button class="fab">+</button>
    </div>
</main>

@code
{
    private List<ProjectDto> _projects = new List<ProjectDto>();
    private List<TaskDto> _ungroupedTasks = new List<TaskDto>();
    private bool _isLoading = true;
    private bool _showNewProjectDialog = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        await LoadProjects();
        await LoadUngroupedTasks();
        
        _isLoading = false;
    }

    private async Task LoadProjects()
    {
        try
        {
            var projects = await ProjectService.GetAllProjectsAsync();
            _projects = projects.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadUngroupedTasks()
    {
        try
        {
            var tasks = await TaskService.GetUngroupedTasksAsync();
            _ungroupedTasks = tasks.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ungrouped tasks: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
}
