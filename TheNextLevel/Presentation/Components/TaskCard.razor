@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@inject ITaskService TaskService

<div class="task-card @(IsCompleted ? "completed" : "")">
    <div class="task-actions">
        <button class="btn-menu" @onclick="OnMenuClick">⋮</button>
    </div>
    <div class="task-checkbox-container">
        <input class="task-checkbox" type="checkbox" checked="@IsCompleted" @onchange="OnStatusChange">
        <div class="task-details">
            <div class="task-title @(IsCompleted ? "completed" : "")">@(Task?.Title ?? "Untitled")</div>
            @if (!string.IsNullOrEmpty(Task?.Description))
            {
                <div class="task-description">@Task.Description</div>
            }
            <div class="task-meta">
                <span class="task-status">@(Task?.IsCompleted == true ? "Completed" : "Pending")</span>
            </div>
        </div>
    </div>
</div>

@code 
{
    [Parameter]
    public TaskDto? Task { get; set; }
    
    [Parameter]
    public EventCallback<TaskDto> OnTaskUpdated { get; set; }
    
    private bool IsCompleted => Task?.IsCompleted == true;
    
    private async Task OnStatusChange(ChangeEventArgs e)
    {
        if (Task == null) return;
        
        var isChecked = (bool)(e.Value ?? false);
        
        if (isChecked && !IsCompleted)
        {
            await TaskService.CompleteTaskAsync(Task.Id);
        }
        else if (!isChecked && IsCompleted)
        {
            await TaskService.ReopenTaskAsync(Task.Id);
        }
        
        // Refresh task data and notify parent
        var updatedTask = await TaskService.GetTaskByIdAsync(Task.Id);
        if (updatedTask != null)
        {
            await OnTaskUpdated.InvokeAsync(updatedTask);
        }
    }
    
    private void OnMenuClick()
    {
        // TODO: Implement task menu (edit, delete, etc.)
    }
}
