@page "/tasks"
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@inject ITaskService TaskService
@inject IProjectService ProjectService

<main class="main-content">
    <div class="page-header">
        <h2 class="page-title">All Tasks</h2>
        <div class="filter-controls">
            <button class="filter-btn @(_showCompleted ? "" : "active")" @onclick="ShowPending">
                Pending (@_pendingCount)
            </button>
            <button class="filter-btn @(_showCompleted ? "active" : "")" @onclick="ShowCompleted">
                Completed (@_completedCount)
            </button>
        </div>
    </div>

    <div class="@(_totalCount > 0 ? "task-grid" : "")" style="@(_totalCount > 0 ? "overflow-y:scroll" : "")" tabindex="-1">
        <Virtualize ItemsProvider="LoadTasksProvider" @ref="_virtualizeComponent" Context="task">
            <ItemContent>
                <TaskCard
                    Task="task"
                    OnTaskUpdated="HandleTaskUpdated"
                    OnTaskDeleted="HandleTaskDeleted"
                    OnTaskEdit="HandleTaskEdit" />
            </ItemContent>
            <Placeholder>
                <div class="loading-card">Loading...</div>
            </Placeholder>
            <EmptyContent>
                <div class="empty-state">
                    @if (_showCompleted)
                    {
                        <div class="empty-icon">âœ“</div>
                        <p class="empty-title">No completed tasks yet</p>
                        <p class="empty-subtitle">Tasks you complete will appear here</p>
                    }
                    else
                    {
                        <div class="empty-icon">ðŸŽ¯</div>
                        <p class="empty-title">No pending tasks</p>
                        <p class="empty-subtitle">You're all caught up! Time to add something new?</p>
                    }
                </div>
            </EmptyContent>
        </Virtualize>
    </div>

    <div class="fab-container">
        <button class="fab" @onclick="OpenNewTaskDialog" title="Create new task">+</button>
    </div>

    <NewTaskDialog
        IsVisible="_showTaskDialog"
        OnResult="HandleTaskSaved"
        OnCancel="CloseTaskDialog" />
</main>
@code {
    private Virtualize<TaskDto>? _virtualizeComponent;
    private bool _isLoading = false;
    private bool _showCompleted = false;
    private bool _showTaskDialog = false;
    private int _pendingCount = 0;
    private int _completedCount = 0;
    private int _totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        
    }

    private async ValueTask<ItemsProviderResult<TaskDto>> LoadTasksProvider(ItemsProviderRequest request)
    {
        try
        {
            var pagedResult = await TaskService.GetTasksPagedAsync(
                skip: request.StartIndex,
                take: request.Count,
                isCompleted: _showCompleted);

            _totalCount = pagedResult.TotalCount;

            return new ItemsProviderResult<TaskDto>(
                pagedResult.Items,
                pagedResult.TotalCount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
            return new ItemsProviderResult<TaskDto>(
                Array.Empty<TaskDto>(),
                0);
        }
    }

    private async Task ShowPending()
    {
        _showCompleted = false;
        _totalCount = _pendingCount;
        await RefreshList();
    }

    private async Task ShowCompleted()
    {
        _showCompleted = true;
        _totalCount = _completedCount;
        await RefreshList();
    }

    private async Task RefreshList()
    {
        if (_virtualizeComponent != null)
        {
            await _virtualizeComponent.RefreshDataAsync();
        }
        StateHasChanged();
    }

    private void OpenNewTaskDialog()
    {
        _showTaskDialog = true;
    }

    private void CloseTaskDialog()
    {
        _showTaskDialog = false;
    }

    private async Task HandleTaskSaved(TaskDto newTask)
    {
        _showTaskDialog = false;
        await RefreshList();
    }

    private async Task HandleTaskUpdated(TaskDto updatedTask)
    {
        await RefreshList();
    }

    private async Task HandleTaskDeleted(TaskDto deletedTask)
    {
        await RefreshList();
    }

    private void HandleTaskEdit(TaskDto task)
    {
        // TODO: Implement edit dialog
        // For now, we'll need to create an EditTaskDialog component
    }
}