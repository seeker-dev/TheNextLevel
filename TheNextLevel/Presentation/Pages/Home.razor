@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@inject IProjectService ProjectService

@page "/"
<main class="main-content">
    @if (_isLoading)
    {
        <p>Loading projects...</p>
    }
    else
    {
        <div class="projects-grid">
            @foreach (var project in _projects)
            {
                <ProjectCard Project="project"
                             OnEdit="OnProjectEdit"
                             OnUpdate="OnProjectUpdated"
                             OnDelete="OnProjectDeleted" />
            }
            <div class="new-project-card" @onclick="ShowNewProjectDialogHandler">
                <span class="plus-icon">+</span>
                <span>Create New Project</span>
            </div>
            @if (_showNewProjectDialog)
            {
                <NewProjectDialog OnProjectCreated="OnProjectCreated"
                                  OnCancel="OnProjectDialogCancel" />
            }
        </div>
    }
</main>

@code
{
    private List<ProjectDto> _projects = new List<ProjectDto>();
    private bool _isLoading = true;
    private bool _showNewProjectDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            _isLoading = true;
            var projects = await ProjectService.GetAllProjectsAsync();
            _projects = projects.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowNewProjectDialogHandler()
    {
        Console.WriteLine("ShowNewProjectDialogHandler called");
        _showNewProjectDialog = true;
        StateHasChanged(); // Force UI update
    }

    private async Task TestClick()
    {
        Console.WriteLine("TestClick called!");
        _showNewProjectDialog = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnProjectCreated(ProjectDto newProject)
    {
        _showNewProjectDialog = false;
        await LoadProjects();
    }

    private void OnProjectDialogCancel()
    {
        _showNewProjectDialog = false;
    }

    private Task OnProjectUpdated(ProjectDto updatedProject)
    {
        // Update the project in the local list
        var index = _projects.FindIndex(p => p.Id == updatedProject.Id);
        if (index >= 0)
        {
            _projects[index] = updatedProject;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task OnProjectDeleted(ProjectDto deletedProject)
    {
        // Remove the project from the local list
        _projects.RemoveAll(p => p.Id == deletedProject.Id);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnProjectEdit(ProjectDto projectToEdit)
    {
        // For now, just show a placeholder. This could open an edit dialog in the future
        Console.WriteLine($"Edit project requested: {projectToEdit.Name}");
        return Task.CompletedTask;
    }
}
