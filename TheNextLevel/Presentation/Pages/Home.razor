@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@inject ITaskService TaskService

@page "/"
<main class="main-content">

</main>

@code
{
    private List<TaskDto> _tasks = new List<TaskDto>();
    private bool _isLoading = true;
    private bool _showNewTaskDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            _isLoading = true;
            var tasks = await TaskService.GetAllTasksAsync();
            _tasks = tasks.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowNewTaskDialogHandler()
    {
        Console.WriteLine("ShowNewTaskDialogHandler called");
        _showNewTaskDialog = true;
        StateHasChanged(); // Force UI update
    }

    private async Task TestClick()
    {
        Console.WriteLine("TestClick called!");
        _showNewTaskDialog = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnTaskCreated(TaskDto newTask)
    {
        _showNewTaskDialog = false;
        await LoadTasks();
    }

    private void OnTaskDialogCancel()
    {
        _showNewTaskDialog = false;
    }
    
    private Task OnTaskUpdated(TaskDto updatedTask)
    {
        // Update the task in the local list
        var index = _tasks.FindIndex(t => t.Id == updatedTask.Id);
        if (index >= 0)
        {
            _tasks[index] = updatedTask;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task OnTaskDeleted(TaskDto deletedTask)
    {
        // Remove the task from the local list
        _tasks.RemoveAll(t => t.Id == deletedTask.Id);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnTaskEdit(TaskDto taskToEdit)
    {
        // For now, just show a placeholder. This could open an edit dialog in the future
        Console.WriteLine($"Edit task requested: {taskToEdit.Title}");
        return Task.CompletedTask;
    }
}
