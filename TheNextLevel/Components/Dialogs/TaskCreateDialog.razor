@using TheNextLevel.ViewModels
<div class="ntd-overlay @(IsVisible ? "visible" : "")" @onclick="OnOverlayClick">
    <div class="ntd-container" @onclick:stopPropagation="true">
        <div class="ntd-header">
            <h2 class="ntd-title">Create New Task</h2>
            <button class="ntd-btn-close" @onclick="Cancel">×</button>
        </div>
        
        <div class="ntd-body">
            <div class="ntd-form-section">
                <div class="ntd-section-title">
                    <span class="ntd-section-icon">📝</span>
                    Task Details
                </div>
                
                <div class="ntd-form-group">
                    <label class="ntd-form-label">Title</label>
                    <input class="ntd-form-input" @bind="newTask.Title" placeholder="Enter task title..." />
                </div>
                
                <div class="ntd-form-group">
                    <label class="ntd-form-label">Description</label>
                    <textarea class="ntd-form-input ntd-form-textarea" @bind="newTask.Description" placeholder="Add task description..."></textarea>
                </div>
            </div>
        </div>
        
        <div class="ntd-footer">
            <div class="ntd-footer-left">
                <span class="ntd-motivation-text">Every task completed is a step forward! 🚀</span>
            </div>
            <div class="ntd-footer-right">
                <button class="ntd-btn ntd-btn-cancel" @onclick="Cancel">Cancel</button>
                <button class="ntd-btn ntd-btn-save" @onclick="Save" disabled="@string.IsNullOrWhiteSpace(newTask.Title)">Save Task</button>
            </div>
        </div>
    </div>
</div>

@code {
	[Parameter]
	public bool IsVisible { get; set; }

	[Parameter]
	public EventCallback<NLTask> OnSave { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	private NLTask newTask { get; set; } = new NLTask();

	protected override void OnParametersSet()
	{
		if (IsVisible)
		{
			newTask = new NLTask(); // Reset the task when dialog is shown
		}
	}

	private async Task Cancel()
	{
		await OnCancel.InvokeAsync();
	}

	private async Task OnOverlayClick()
	{
		// Close dialog when clicking outside (on the overlay)
		await Cancel();
	}

	private async Task Save()
	{
		if (!string.IsNullOrWhiteSpace(newTask.Title))
		{
			await OnSave.InvokeAsync(newTask);
			newTask = new NLTask(); // Reset the task after saving
		}
	}
}
