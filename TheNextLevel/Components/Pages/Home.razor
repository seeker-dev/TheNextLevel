@using TheNextLevel.Components.Objects
@using TheNextLevel.Components.Dialogs
@using TheNextLevel.ViewModels

@page "/"
<main class="main-content">
    <div class="task-section">
        <div class="section-header">
        </div>
        @if (_isLoading)
        {
            <p>Loading tasks...</p>
        }
        else if (_tasks?.Count > 0)
        {
            <div class="task-grid">
                @foreach (var task in _tasks)
                {
                    <TaskCard Task="@task" />
                }
            </div>
        }
        else
        {
            <p>No tasks available.</p>
        }
        <div class="fab-container">
            <button class="fab" @onclick="ShowNewTaskDialogHandler">+</button>
        </div>
        <TaskCreateDialog IsVisible="@isNewTaskDialogVisible"
                          OnSave="TaskCardOnSaveHandler"
                          OnCancel="TaskCardOnCancelHandler" />
    </div>
</main>
@code
{
    private List<NLTask>? _tasks = new List<NLTask>();
    private bool _isLoading = true;
    private bool isNewTaskDialogVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        await Task.Delay(2000);

        // try
        // {
        //     _tasks = await TaskService.GetAllTasksAsync();
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error loading tasks: {ex.Message}");
        // }
        // finally
        // {
        _isLoading = false;
        // }
    }

    private void ShowNewTaskDialogHandler() => isNewTaskDialogVisible = true;
    private void TaskCardOnCancelHandler() => isNewTaskDialogVisible = false;
    private void TaskCardOnSaveHandler(NLTask newTask)
    {
        newTask.Id = _tasks.Any() ? _tasks.Max(t => t.Id) + 1 : 1; // Assign a new ID

        _tasks.Add(newTask);
        isNewTaskDialogVisible = false;
    }
}
