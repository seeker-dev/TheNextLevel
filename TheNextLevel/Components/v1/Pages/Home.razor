@page "/"
@using TaskManagement.Domain.Commands.Task;
@using TheNextLevel.Components.v1.Shared
@using TheNextLevel.Components.v1
@using TheNextLevel.Controllers;
@using TheNextLevel.Controllers.v1

<div class="task-manager">
    <div class="task-grid">
        @foreach (var task in FilteredTasks)
        {
            <TaskCard NLTask="task" OnStatusChanged="UpdateTaskStatus" />
        }
    </div>
    <div class="new-task-container">
        <button class="btn-new-task" @onclick="ShowNewTaskDialog">
            <span>+</span>
            <span class="tooltip">New Task</span>
        </button>
    </div>
    <NewTaskDialog
    IsVisible="@isNewTaskDialogVisible"
    OnSave="HandleNewTaskSave"
    OnCancel="HandleNewTaskCancel" />
</div>

@code {
    private List<NLTask> Tasks => GetAllTasks();

    private bool isNewTaskDialogVisible = false;
    private bool ShowCompletedTasks = false;

    private IEnumerable<NLTask> FilteredTasks => Tasks.Where(t => !t.Completed || ShowCompletedTasks);

    private List<NLTask> GetAllTasks()
    {
        throw new NotImplementedException("This method should be implemented to fetch tasks from the database or API.");
    }

    private void ShowNewTaskDialog() =>
        // Logic to show a dialog for creating a new task
        // This could be a modal or a separate component
        isNewTaskDialogVisible = true;

    private void HandleNewTaskCancel() => isNewTaskDialogVisible = false;

    private void HandleNewTaskSave(NLTask newTask)
    {
        newTask.Id = Tasks.Any() ? Tasks.Max(t => t.Id) + 1 : 1; // Assign a new ID

        Tasks.Add(newTask);
        isNewTaskDialogVisible = false;
    }

    private void UpdateTaskStatus(NLTask task)
    {
        var selectedTask = Tasks.FirstOrDefault(t => t.Id == task.Id);
        if (selectedTask != null)
        {
            selectedTask.Completed = task.Completed;
        }
    }
}