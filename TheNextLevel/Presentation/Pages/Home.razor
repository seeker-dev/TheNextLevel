@using TheNextLevel.Presentation.Components
@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@inject ITaskService TaskService

@page "/"
<main class="main-content">
    <div class="task-section">
        <div class="section-header">
            <h1>My Tasks</h1>
        </div>
        @if (_isLoading)
        {
            <p>Loading tasks...</p>
        }
        else if (_tasks?.Count > 0)
        {
            <div class="task-grid">
                @foreach (var task in _tasks)
                {
                    <TaskCard Task="@task" OnTaskUpdated="OnTaskUpdated" />
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <p>No tasks yet. Create your first task to get started!</p>
            </div>
        }
        <div class="fab-container">
            <button class="fab" @onclick="ShowNewTaskDialogHandler">+</button>
        </div>
    </div>
</main>

@code
{
    private List<TaskDto> _tasks = new List<TaskDto>();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            _isLoading = true;
            var tasks = await TaskService.GetAllTasksAsync();
            _tasks = tasks.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShowNewTaskDialogHandler()
    {
        // Simplified - for Clean Architecture demo
        // TODO: Implement proper dialog system
        await LoadTasks();
    }
    
    private Task OnTaskUpdated(TaskDto updatedTask)
    {
        // Update the task in the local list
        var index = _tasks.FindIndex(t => t.Id == updatedTask.Id);
        if (index >= 0)
        {
            _tasks[index] = updatedTask;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}
