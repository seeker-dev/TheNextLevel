@* Debug: IsVisible = @IsVisible *@
@if (IsVisible)
{
    <div class="ntd-overlay visible" @onclick="HandleOverlayClick">
        <div class="ntd-container" @onclick:stopPropagation="true">
            <div class="ntd-header">
                <h2 class="ntd-title">Create New Task</h2>
                <button class="ntd-btn-close" @onclick="Cancel">√ó</button>
            </div>
            
            <div class="ntd-body">
                <div class="ntd-form-section">
                    <div class="ntd-section-title">
                        <span class="ntd-section-icon">üìù</span>
                        Task Details
                    </div>
                    
                    <div class="ntd-form-group">
                        <label class="ntd-form-label">Title</label>
                        <input class="ntd-form-input" @bind="taskTitle" placeholder="Enter task title..." />
                    </div>
                    
                    <div class="ntd-form-group">
                        <label class="ntd-form-label">Description</label>
                        <textarea class="ntd-form-input ntd-form-textarea" @bind="taskDescription" placeholder="Add task description..."></textarea>
                    </div>
                </div>
            </div>
            
            <div class="ntd-footer">
                <div class="ntd-footer-left">
                    <span class="ntd-motivation-text">Every task completed is a step forward! üöÄ</span>
                </div>
                <div class="ntd-footer-right">
                    <button class="ntd-btn ntd-btn-cancel" @onclick="Cancel">Cancel</button>
                    <button class="ntd-btn ntd-btn-save" @onclick="Save">Save Task</button>
                </div>
            </div>
        </div>
    </div>
}

@using TheNextLevel.Application.Interfaces
@using TheNextLevel.Application.DTOs
@inject ITaskService TaskService

@code {
	[Parameter]
	public bool IsVisible { get; set; }

	[Parameter]
	public EventCallback<TaskDto> OnResult { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	private string taskTitle = string.Empty;
	private string taskDescription = string.Empty;

	protected override void OnParametersSet()
	{
		if (IsVisible)
		{
			// Reset form when dialog is shown
			taskTitle = string.Empty;
			taskDescription = string.Empty;
		}
	}

	private async Task Cancel()
	{
		await OnCancel.InvokeAsync();
	}

	private async Task HandleOverlayClick()
	{
		await Cancel();
	}

	private async Task Save()
	{
		if (!string.IsNullOrWhiteSpace(taskTitle))
		{
			var request = new CreateTaskRequest(
				taskTitle.Trim(),
				taskDescription?.Trim() ?? string.Empty
			);

			var taskId = await TaskService.CreateTaskAsync(request);
			var createdTask = await TaskService.GetTaskByIdAsync(taskId);
			
			if (createdTask != null)
			{
				await OnResult.InvokeAsync(createdTask);
			}

			// Reset form after saving
			taskTitle = string.Empty;
			taskDescription = string.Empty;
		}
	}
}
