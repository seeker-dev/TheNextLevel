@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@using TheNextLevel.Application.Services
@inject IProjectService ProjectService
@inject ITaskService TaskService

@page "/"
<main class="main-content">
    <div class="@(_totalCount > 0 ? "projects-grid" : "")" style="@(_totalCount > 0 ? "overflow-y:scroll" : "")" tabindex="-1">
        <Virtualize ItemsProvider="LoadProjectsProvider" @ref="_virtualizeComponent" Context="project">
            <ItemContent>
                <ProjectCard
                    Project="project"
                    OnProjectEdit="HandleProjectEdit"
                    OnProjectDeleted="HandleProjectDeleted" />
            </ItemContent>
            <Placeholder>
                <div class="loading-card">Loading...</div>
            </Placeholder>
            <EmptyContent>
                <div class="empty-project">
                    <p>No projects found. Create your first project!</p>
                </div>
            </EmptyContent>
        </Virtualize>
    </div>

    <div class="fab-container">
        <button class="fab" @onclick="OpenNewProjectDialog">+</button>
    </div>

    <NewProjectDialog
        IsVisible="_showProjectDialog"
        ExistingProject="_editingProject"
        OnResult="HandleProjectSaved"
        OnCancel="CloseProjectDialog" />
</main>

@code
{
    private Virtualize<ProjectDto>? _virtualizeComponent;
    private bool _isLoading = false;
    private bool _showProjectDialog = false;
    private ProjectDto? _editingProject = null;
    private int _totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        
    }

    private async ValueTask<ItemsProviderResult<ProjectDto>> LoadProjectsProvider(ItemsProviderRequest request)
    {
        try
        {
            var pagedResult = await ProjectService.GetProjectsPagedAsync(
                skip: request.StartIndex,
                take: request.Count);

            _totalCount = pagedResult.TotalCount;

            return new ItemsProviderResult<ProjectDto>(
                pagedResult.Items,
                pagedResult.TotalCount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
            return new ItemsProviderResult<ProjectDto>(
                Array.Empty<ProjectDto>(),
                0);
        }
    }

    private async Task RefreshList()
    {
        if (_virtualizeComponent != null)
        {
            await _virtualizeComponent.RefreshDataAsync();
        }
        StateHasChanged();
    }

    private void OpenNewProjectDialog()
    {
        _editingProject = null;  // null = create mode
        _showProjectDialog = true;
    }

    private void CloseProjectDialog()
    {
        _showProjectDialog = false;
        _editingProject = null;  // reset state
    }

    private async Task HandleProjectSaved(ProjectDto savedProject)
    {
        CloseProjectDialog();
        await RefreshList();
    }

    private void HandleProjectEdit(ProjectDto project)
    {
        // TODO: invesigating if this is actually working 
        _editingProject = project;  // not null = edit mode
        _showProjectDialog = true;
    }

    private async Task HandleProjectDeleted(ProjectDto project)
    {
        await RefreshList();
    }
}
