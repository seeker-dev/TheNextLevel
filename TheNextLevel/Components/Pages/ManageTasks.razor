@page "/managetasks"

<style>
    .no-select {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }
</style>

<div class="dropdown position-fixed bottom-0 end-0 mb-3 me-3" style="z-index:1500;">
    <button type="button" class="btn btn-primary">Add Task</button>
    <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
        All Actions
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
        <li><a class="dropdown-item" href="#">Edit Tasks</a></li>
        <li><a class="dropdown-item text-danger" href="#">Delete Tasks</a></li>
    </ul>
</div>

<h3>Manage your tasks</h3>

<div class="row">
    <div class="list-group" style="height: 400px; overflow-y: auto;">
        <Virtualize Items="@tasks" Context="task">
            <a class="list-group-item list-group-item-action no-select @(task.IsSelected ? "active" : "")" @onclick="(e) => ToggleTaskSelection(task, e)">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@task.Name</h5>
                    <small>3 days ago</small>
                </div>
                <p class="mb-1">@task.Description</p>
            </a>
        </Virtualize>
    </div>
</div>

@code {
    public class Task
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; }
        public bool IsSelected { get; set; }
        public bool IsCompleted { get; set; }
    }

    private List<Task> tasks = new List<Task>();
    private Task newTask;
    protected override void OnInitialized()
    {
        // Add test data - 1000 tasks
        for (int i = 1; i <= 1000; i++)
        {
            tasks.Add(
                new Task 
                { 
                    Name = $"Test Task #{i}",
                    Description = $"Test Description"
                });
        }

        newTask = new Task();
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask.Name))
        {
            tasks.Add(newTask);
            newTask.Name = string.Empty;
        }
    }
    private void DeleteTask(Task task)
    {
        tasks.Remove(task);
    }
    private void EditTask(Task task)
    {
        // Implement edit logic here
        // For example, you could set newTask to the task and allow the user to edit it
        newTask = task;
        tasks.Remove(task);
    }
    private void ToggleTaskSelection(Task task, MouseEventArgs e)
    {
        if (e.CtrlKey)
        {
            task.IsSelected = !task.IsSelected;
            StateHasChanged();
        }
    }
}
