@using TheNextLevel.Application.DTOs
@using TheNextLevel.Application.Interfaces
@using TheNextLevel.Application.Services
@inject IProjectService ProjectService
@inject ITaskService TaskService

@page "/"
<main class="main-content">
    @if (_isLoading)
    {
        <p>Loading projects...</p>
    }
    else if (_projects.Count == 0)
    {
        <div class="empty-project">
            <p>No projects found. Create your first project!</p>
        </div>
    }
    else
    {
        <div class="projects-grid">
            <Virtualize Items="_projects" Context="project">
                <ProjectCard
                    Project="project"
                    OnProjectEdit="HandleProjectEdit"
                    OnProjectDeleted="HandleProjectDeleted" />
            </Virtualize>
        </div>
    }

    <div class="fab-container">
        <button class="fab" @onclick="OpenNewProjectDialog">+</button>
    </div>

    <NewProjectDialog
        IsVisible="_showProjectDialog"
        ExistingProject="_editingProject"
        OnResult="HandleProjectSaved"
        OnCancel="CloseProjectDialog" />
</main>

@code
{
    private List<ProjectDto> _projects = new List<ProjectDto>();
    private List<TaskDto> _ungroupedTasks = new List<TaskDto>();
    private bool _isLoading = true;
    private bool _showProjectDialog = false;
    private ProjectDto? _editingProject = null;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        await LoadProjects();
        await LoadUngroupedTasks();
        
        _isLoading = false;
    }

    private async Task LoadProjects()
    {
        try
        {
            var projects = await ProjectService.GetAllProjectsAsync(true);
            _projects = projects.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadUngroupedTasks()
    {
        try
        {
            var tasks = await TaskService.GetUngroupedTasksAsync();
            _ungroupedTasks = tasks.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ungrouped tasks: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OpenNewProjectDialog()
    {
        _editingProject = null;  // null = create mode
        _showProjectDialog = true;
    }

    private void CloseProjectDialog()
    {
        _showProjectDialog = false;
        _editingProject = null;  // reset state
    }

    private async Task HandleProjectSaved(ProjectDto savedProject)
    {
        if (_editingProject != null)
        {
            // Edit mode: update existing project in list
            var index = _projects.FindIndex(p => p.Id == savedProject.Id);
            if (index >= 0)
            {
                _projects[index] = savedProject;
            }
        }
        else
        {
            // Create mode: add new project to list
            _projects.Add(savedProject);
        }

        CloseProjectDialog();
        StateHasChanged();
    }

    private void HandleProjectEdit(ProjectDto project)
    {
        _editingProject = project;  // not null = edit mode
        _showProjectDialog = true;
    }

    private async Task HandleProjectDeleted(ProjectDto project)
    {
        _projects.Remove(project);
        StateHasChanged();
    }
}
